// ===================================================================
// ======   ARQUIVO COMPLETO E CORRIGIDO PARA diario.js   ======
// ===================================================================

// --- PASSO 1: DECLARA√á√ÉO DE TODAS AS FUN√á√ïES ---

// Fun√ß√£o para vibrar (opcional, mas mant√©m a consist√™ncia)
function triggerVibration() {
    if ('vibrate' in navigator) {
        navigator.vibrate(50);
    }
}

// Fun√ß√£o para controlar as abas
function initTabs() {
    const tabLinks = document.querySelectorAll('.tab-link');
    const tabContents = document.querySelectorAll('.tab-content');

    tabLinks.forEach(link => {
        link.addEventListener('click', () => {
            if (link.classList.contains('active')) {
                return;
            }
            triggerVibration();
            const tabId = link.getAttribute('data-tab');

            tabLinks.forEach(item => item.classList.remove('active'));
            link.classList.add('active');

            tabContents.forEach(content => {
                if (content.id === tabId) {
                    content.classList.add('active');
                } else {
                    content.classList.remove('active');
                }
            });
        });
    });
}

// Fun√ß√£o para o formul√°rio de registro e card de destaque
function initDiary() {
    const dailyChecklistForm = document.getElementById('dailyChecklistForm');
    if (!dailyChecklistForm) return;

    dailyChecklistForm.addEventListener('submit', (e) => {
        e.preventDefault();
        triggerVibration();

        // Pega os elementos dos cards
        const highlightIcon = document.querySelector('.highlight-icon');
        const highlightMessage = document.getElementById('highlightMessage');
        const connectionSuggestion = document.getElementById('connectionSuggestion');

        // Pega os dados do formul√°rio
        const formData = new FormData(dailyChecklistForm);
        const mood = formData.get('mood');
        const observations = document.getElementById('diaryMessage').value;
        const activities = formData.getAll('activity'); // Pega todas as atividades marcadas

        // --- L√≥gica para o Destaque do Dia (sem altera√ß√µes) ---
        if (observations.trim() !== '') {
            highlightIcon.textContent = 'üìù';
            highlightMessage.textContent = observations;
        } else if (mood) {
            const moodMap = {
                feliz: { icon: 'üòä', text: 'Hoje foi um dia feliz!' },
                calmo: { icon: 'üòê', text: 'O dia foi calmo e sereno.' },
                agitado: { icon: 'üòü', text: 'Hoje o dia foi um pouco mais agitado.' },
                triste: { icon: 'üò¢', text: 'Hoje o humor esteve um pouco mais para baixo.' }
            };
            highlightIcon.textContent = moodMap[mood].icon;
            highlightMessage.textContent = moodMap[mood].text;
        } else {
            highlightIcon.textContent = 'üìã';
            highlightMessage.textContent = 'Registro do dia salvo.';
        }

        // --- NOVA L√ìGICA PARA O MOMENTO CONEX√ÉO ---
        const suggestions = {
            caminhada: "Que tal perguntar como foi a caminhada e o que ela viu de interessante no caminho?",
            fisioterapia: "Pergunte como ela est√° se sentindo ap√≥s a fisioterapia e se algum exerc√≠cio foi novidade.",
            alongamento: "Uma boa ideia √© perguntar se ela se sentiu mais disposta depois de se alongar.",
            nenhuma: "Talvez seja uma boa ideia sugerir uma atividade leve para amanh√£, como ouvir uma m√∫sica juntos por telefone.",
            default: "Pergunte qual foi a parte favorita do dia dela hoje!"
        };

        let finalSuggestion = suggestions.default;
        // Pega a primeira atividade da lista para gerar a sugest√£o
        if (activities.length > 0 && suggestions[activities[0]]) {
            finalSuggestion = suggestions[activities[0]];
        }
        connectionSuggestion.textContent = finalSuggestion;


        alert('Registro di√°rio salvo com sucesso!');
        dailyChecklistForm.reset();
    });
}

// Fun√ß√£o para controlar a edi√ß√£o do Perfil de Sa√∫de
function initProfileEditing() {
    const editBtn = document.getElementById('editProfileBtn');
    const profileGrid = document.getElementById('profileGrid');
    if (!editBtn || !profileGrid) return;

    editBtn.addEventListener('click', () => {
        triggerVibration();
        const isEditing = profileGrid.classList.contains('editing');

        if (isEditing) {
            profileGrid.querySelectorAll('.profile-item').forEach(item => {
                const valueSpan = item.querySelector('.item-value');
                const input = item.querySelector('.item-input');
                if (input.type === 'date') {
                    const [year, month, day] = input.value.split('-');
                    valueSpan.textContent = `${day}/${month}/${year}`;
                } else {
                    valueSpan.textContent = input.value;
                }
            });
            profileGrid.classList.remove('editing');
            editBtn.textContent = 'Editar Perfil';
            alert('Perfil atualizado com sucesso!');
        } else {
            profileGrid.querySelectorAll('.profile-item').forEach(item => {
                const valueSpan = item.querySelector('.item-value');
                const input = item.querySelector('.item-input');
                if (input.type !== 'date') {
                    input.value = valueSpan.textContent;
                }
            });
            profileGrid.classList.add('editing');
            editBtn.textContent = 'Salvar Altera√ß√µes';
        }
    });
}

// Fun√ß√£o para os gr√°ficos interativos
function initInteractiveCharts() {
    const tooltip = document.getElementById('chartTooltip');
    const charts = document.querySelectorAll('.bar-chart, .line-chart');
    if (!tooltip || charts.length === 0) return;

    charts.forEach(chart => {
        chart.addEventListener('mousemove', (e) => {
            const title = chart.closest('.chart-container').querySelector('h4').textContent;
            const mockValue = `${title}: Valor do Dia (Exemplo)`;
            tooltip.style.display = 'block';
            tooltip.textContent = mockValue;
            tooltip.style.left = e.pageX + 15 + 'px';
            tooltip.style.top = e.pageY - 30 + 'px';
        });
        chart.addEventListener('mouseleave', () => {
            tooltip.style.display = 'none';
        });
    });
}

// --- PASSO 2: EXECU√á√ÉO DO SCRIPT QUANDO A P√ÅGINA CARREGA ---
document.addEventListener('DOMContentLoaded', () => {
    // 1. VERIFICA SE H√Å UM USU√ÅRIO LOGADO
    const loggedInUserData = sessionStorage.getItem('loggedInUser');
    if (!loggedInUserData) {
        alert('Voc√™ precisa fazer o login para acessar esta p√°gina.');
        window.location.href = 'login.html';
        return;
    }

    // 2. PERSONALIZA A P√ÅGINA
    const userData = JSON.parse(loggedInUserData);
    const diaryTitle = document.getElementById('diaryTitle');
    const diarySubtitle = document.getElementById('diarySubtitle');
    const profileImage = document.getElementById('profileImage');
    
    if (diaryTitle) {
        diaryTitle.textContent = `Di√°rio de Bordo da V√≥ ${userData.avo}`;
    }
    if (diarySubtitle) {
        diarySubtitle.textContent = `Registros de cuidado e bem-estar da ${userData.familia}`;
    }
    if (profileImage) {
        profileImage.alt = `Foto da V√≥ ${userData.avo}`;
    }
    
    // 3. INICIALIZA TODAS AS FUN√á√ïES DA P√ÅGINA
    initTabs();
    initDiary();
    initProfileEditing();
    initInteractiveCharts();
});

// Adicione esta nova fun√ß√£o ANTES do evento 'DOMContentLoaded' no seu diario.js

function initTimeline() {
    const timelineItems = document.querySelectorAll('.timeline-item');
    if (timelineItems.length === 0) return;

    timelineItems.forEach(item => {
        const header = item.querySelector('.timeline-header');
        if (header) {
            header.addEventListener('click', () => {
                triggerVibration();
                // Fecha todos os outros itens para manter a interface limpa
                timelineItems.forEach(otherItem => {
                    if (otherItem !== item) {
                        otherItem.classList.remove('active');
                    }
                });
                // Alterna o estado do item clicado
                item.classList.toggle('active');
            });
        }
    });
}


// AGORA, adicione a chamada da nova fun√ß√£o dentro do 'DOMContentLoaded'
// que j√° existe no seu arquivo.

document.addEventListener('DOMContentLoaded', () => {
    // ... seu c√≥digo de login e personaliza√ß√£o ...

    // 3. INICIALIZA AS FUN√á√ïES DA P√ÅGINA
    initTabs();
    initDiary();
    initProfileEditing();
    initInteractiveCharts();
    initTimeline(); // <-- ADICIONE ESTA LINHA
});
